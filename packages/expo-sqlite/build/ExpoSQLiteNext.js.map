{"version":3,"file":"ExpoSQLiteNext.js","sourceRoot":"","sources":["../src/ExpoSQLiteNext.ts"],"names":[],"mappings":"AAGA,eAAe;IACb,cAAc,CACZ,YAAoB,EACpB,SAAkB,EAClB,OAA2B,EAC3B,cAA2B;QAE3B,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,YAAoB,EAAE,SAAiB;QAChE,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED,mBAAmB,CAAC,YAAoB,EAAE,SAAiB;QACzD,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED,eAAe;QACb,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,YAAoB,EAAE,SAAkB;QAChE,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED,kBAAkB,CAAC,YAAoB,EAAE,SAAkB;QACzD,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED,wBAAwB,CACtB,YAAoB,EACpB,SAAiB,EACjB,iBAAyB,EACzB,cAAuB;QAEvB,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED,sCAAsC;IAEtC,WAAW,CAAC,SAAiB,EAAE,QAA8C;QAC3E,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IACD,eAAe;QACb,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED,YAAY;CACb,CAAC","sourcesContent":["import type { SQLiteOpenOptions } from './NativeDatabase';\nimport type { DatabaseChangeEvent } from './SQLiteDatabase';\n\nexport default {\n  NativeDatabase(\n    databaseName: string,\n    directory?: string,\n    options?: SQLiteOpenOptions,\n    serializedData?: Uint8Array\n  ): void {\n    throw new Error('Unimplemented');\n  },\n\n  async ensureHasAccessAsync(databaseName: string, directory: string): Promise<void> {\n    throw new Error('Unimplemented');\n  },\n\n  ensureHasAccessSync(databaseName: string, directory: string): void {\n    throw new Error('Unimplemented');\n  },\n\n  NativeStatement(): void {\n    throw new Error('Unimplemented');\n  },\n\n  async deleteDatabaseAsync(databaseName: string, directory?: string): Promise<void> {\n    throw new Error('Unimplemented');\n  },\n\n  deleteDatabaseSync(databaseName: string, directory?: string): void {\n    throw new Error('Unimplemented');\n  },\n\n  importAssetDatabaseAsync(\n    databaseName: string,\n    directory: string,\n    assetDatabasePath: string,\n    forceOverwrite: boolean\n  ): Promise<void> {\n    throw new Error('Unimplemented');\n  },\n\n  //#region EventEmitter implementations\n\n  addListener(eventName: string, listener: (event: DatabaseChangeEvent) => void) {\n    throw new Error('Unimplemented');\n  },\n  removeListeners() {\n    throw new Error('Unimplemented');\n  },\n\n  //#endregion\n};\n"]}